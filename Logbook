Wednesday 7th September 2022:

I have coded a Python file that allows for a deck of cards to be built, a number of players to be
instantiated with names and stacks, and for each player to be dealt a hand from the deck.
Inspiration from: https://www.youtube.com/watch?v=t8YkjDH86Y4&t=136s

The next step is finding a way to lay down a flop, turn and river while saving the information
of the current hands and stacks. I will need to revisit my python book to help me with this.
I will worry about betting on hands later on, and developing an AI is much further down the line.

I might also try to get Griffin involved to help create a UI.



Thursday 8th September 2022:

I have managed to code a class for the board and member functions to lay down a flop, turn and river.
I did this using input statements. I now need to create a pot and create player actions.

I have coded player actions for: fold, bet and call. Technically I can use these actions for check
and raise as well by concurrently betting 0 and an amount that is greater than the current bet.
I have an idea for using logic statements to enforce rules for when a bet is not met with another raise.
Also need to add an action for paying blinds.

I have now also made code for a pot class, including the ability to collect player bets and
to empty the pot. Currently have no way of identifying a winner so will put a pin in transferring
the money in the pot to the winner of the round.

I have just made an official project directory and online repository, including main and this logbook.
This line is testing that the github repo is working.


Monday 12th September 2022:

Temporarily working on Dad's old desktop while my laptop is getting fixed.

I have just made an action method that requests a player do one of:
check, fold, bet, raise or call. I also coded some logic to ensure that the move is legal, and if not then the action is retaken.


Thursday 15th September 2022:

A class method to ask for actions from all the players has been added to assist in running of the methods. This will have to be editted once the dealer button is made and the order of play changes.

Noticed that something weird is going on with folding. Players cannot fold and continue the turn. Fixed, this was due to an error in the code.

Now when a player folds, its skips the turn of who is directly next.
The problem is that when a player is removed from the player_in_hand list, the for loop skips the next one. Fixed by incorporating a new method that identifies folders.

Also added the pot to the chain of command. Creating one big function for this chain of command will be very useful.


Friday 16th September 2022:

Adapted the action method to make it recursive under certain if statements. This allows for raises to be met and the play to loop around the table when they haven't been met.

After having added an all in option, I've noticed that there is a problem with betting more than the player has. This will needed to be appended in the methods with some logic.
This has now been fixed. I also changed some of the code so that it is impossible to ever have a negative stack and for the game to skip your turn if you have 0 stack but haven't folded.

One problem is that there is no way of creating a side pot or for a big stack to be refunded when they're called for an all in. This will need to be addressed at some point, possibly with a sidepot child class.

Also still need to create a dealer button to change order of play between games.

For the moment, all of the game mechanics for player actions seems to be working as it should be. This will of course need to be play-tested with a nice UI, but for the moment I shall assume it is bug free. The next challenge is finding a way to determine who has the winning hand. For this I think I will have to do some research.


Monday 19th September 2022:

https://codereview.stackexchange.com/questions/128702/poker-hands-in-python

Used the code from above to develop a function to evaluate a hand. Still need to figure out tie-breakers and for how we can use this function to incorporate both the player's cards and the board.